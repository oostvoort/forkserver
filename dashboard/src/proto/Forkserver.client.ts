// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "Forkserver.proto" (package "forkserver", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Fork } from "./Forkserver";
import type { IncreaseTimeRequest } from "./Forkserver";
import type { FundTokenRequest } from "./Forkserver";
import type { LoadStateRequest } from "./Forkserver";
import type { SaveStateResponse } from "./Forkserver";
import type { SaveStateRequest } from "./Forkserver";
import type { ResetRequest } from "./Forkserver";
import type { MineRequest } from "./Forkserver";
import type { StandardResponse } from "./Forkserver";
import type { SetBalanceRequest } from "./Forkserver";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { BlockNumberResponse } from "./Forkserver";
import type { BlockNumberRequest } from "./Forkserver";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service forkserver.Fork
 */
export interface IForkClient {
    /**
     * @generated from protobuf rpc: BlockNumber(forkserver.BlockNumberRequest) returns (forkserver.BlockNumberResponse);
     */
    blockNumber(input: BlockNumberRequest, options?: RpcOptions): UnaryCall<BlockNumberRequest, BlockNumberResponse>;
    /**
     * @generated from protobuf rpc: SetBalance(forkserver.SetBalanceRequest) returns (forkserver.StandardResponse);
     */
    setBalance(input: SetBalanceRequest, options?: RpcOptions): UnaryCall<SetBalanceRequest, StandardResponse>;
    /**
     * @generated from protobuf rpc: Mine(forkserver.MineRequest) returns (forkserver.StandardResponse);
     */
    mine(input: MineRequest, options?: RpcOptions): UnaryCall<MineRequest, StandardResponse>;
    /**
     * @generated from protobuf rpc: Reset(forkserver.ResetRequest) returns (forkserver.StandardResponse);
     */
    reset(input: ResetRequest, options?: RpcOptions): UnaryCall<ResetRequest, StandardResponse>;
    /**
     * @generated from protobuf rpc: SaveState(forkserver.SaveStateRequest) returns (forkserver.SaveStateResponse);
     */
    saveState(input: SaveStateRequest, options?: RpcOptions): UnaryCall<SaveStateRequest, SaveStateResponse>;
    /**
     * @generated from protobuf rpc: LoadState(forkserver.LoadStateRequest) returns (forkserver.StandardResponse);
     */
    loadState(input: LoadStateRequest, options?: RpcOptions): UnaryCall<LoadStateRequest, StandardResponse>;
    /**
     * @generated from protobuf rpc: FundToken(forkserver.FundTokenRequest) returns (forkserver.StandardResponse);
     */
    fundToken(input: FundTokenRequest, options?: RpcOptions): UnaryCall<FundTokenRequest, StandardResponse>;
    /**
     * @generated from protobuf rpc: IncreaseTime(forkserver.IncreaseTimeRequest) returns (forkserver.StandardResponse);
     */
    increaseTime(input: IncreaseTimeRequest, options?: RpcOptions): UnaryCall<IncreaseTimeRequest, StandardResponse>;
}
/**
 * @generated from protobuf service forkserver.Fork
 */
export class ForkClient implements IForkClient, ServiceInfo {
    typeName = Fork.typeName;
    methods = Fork.methods;
    options = Fork.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: BlockNumber(forkserver.BlockNumberRequest) returns (forkserver.BlockNumberResponse);
     */
    blockNumber(input: BlockNumberRequest, options?: RpcOptions): UnaryCall<BlockNumberRequest, BlockNumberResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<BlockNumberRequest, BlockNumberResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetBalance(forkserver.SetBalanceRequest) returns (forkserver.StandardResponse);
     */
    setBalance(input: SetBalanceRequest, options?: RpcOptions): UnaryCall<SetBalanceRequest, StandardResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetBalanceRequest, StandardResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Mine(forkserver.MineRequest) returns (forkserver.StandardResponse);
     */
    mine(input: MineRequest, options?: RpcOptions): UnaryCall<MineRequest, StandardResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<MineRequest, StandardResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Reset(forkserver.ResetRequest) returns (forkserver.StandardResponse);
     */
    reset(input: ResetRequest, options?: RpcOptions): UnaryCall<ResetRequest, StandardResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ResetRequest, StandardResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SaveState(forkserver.SaveStateRequest) returns (forkserver.SaveStateResponse);
     */
    saveState(input: SaveStateRequest, options?: RpcOptions): UnaryCall<SaveStateRequest, SaveStateResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<SaveStateRequest, SaveStateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: LoadState(forkserver.LoadStateRequest) returns (forkserver.StandardResponse);
     */
    loadState(input: LoadStateRequest, options?: RpcOptions): UnaryCall<LoadStateRequest, StandardResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<LoadStateRequest, StandardResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: FundToken(forkserver.FundTokenRequest) returns (forkserver.StandardResponse);
     */
    fundToken(input: FundTokenRequest, options?: RpcOptions): UnaryCall<FundTokenRequest, StandardResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<FundTokenRequest, StandardResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: IncreaseTime(forkserver.IncreaseTimeRequest) returns (forkserver.StandardResponse);
     */
    increaseTime(input: IncreaseTimeRequest, options?: RpcOptions): UnaryCall<IncreaseTimeRequest, StandardResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<IncreaseTimeRequest, StandardResponse>("unary", this._transport, method, opt, input);
    }
}
