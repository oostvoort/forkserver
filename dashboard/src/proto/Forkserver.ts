// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "Forkserver.proto" (package "forkserver", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message forkserver.FundTokenRequest
 */
export interface FundTokenRequest {
    /**
     * @generated from protobuf field: string token_address = 1;
     */
    tokenAddress: string;
    /**
     * @generated from protobuf field: string account_address = 2;
     */
    accountAddress: string;
    /**
     * @generated from protobuf field: string amount = 3;
     */
    amount: string;
    /**
     * @generated from protobuf field: int32 slot = 4;
     */
    slot: number;
}
/**
 * @generated from protobuf message forkserver.ResetRequest
 */
export interface ResetRequest {
}
/**
 * @generated from protobuf message forkserver.BlockNumberRequest
 */
export interface BlockNumberRequest {
}
/**
 * @generated from protobuf message forkserver.SaveStateRequest
 */
export interface SaveStateRequest {
}
/**
 * @generated from protobuf message forkserver.LoadStateRequest
 */
export interface LoadStateRequest {
    /**
     * @generated from protobuf field: string state = 1;
     */
    state: string;
}
/**
 * @generated from protobuf message forkserver.MineRequest
 */
export interface MineRequest {
    /**
     * @generated from protobuf field: int32 blocks = 1;
     */
    blocks: number;
}
/**
 * @generated from protobuf message forkserver.SetBalanceRequest
 */
export interface SetBalanceRequest {
    /**
     * @generated from protobuf field: string address = 1;
     */
    address: string;
}
/**
 * @generated from protobuf message forkserver.StandardResponse
 */
export interface StandardResponse {
    /**
     * @generated from protobuf field: string status = 1;
     */
    status: string;
}
/**
 * @generated from protobuf message forkserver.DevRequest
 */
export interface DevRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message forkserver.BlockNumberResponse
 */
export interface BlockNumberResponse {
    /**
     * @generated from protobuf field: string block_number = 1;
     */
    blockNumber: string;
}
/**
 * @generated from protobuf message forkserver.SaveStateResponse
 */
export interface SaveStateResponse {
    /**
     * @generated from protobuf field: string state = 1;
     */
    state: string;
}
/**
 * @generated from protobuf message forkserver.IncreaseTimeRequest
 */
export interface IncreaseTimeRequest {
    /**
     * @generated from protobuf field: int32 seconds = 1;
     */
    seconds: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class FundTokenRequest$Type extends MessageType<FundTokenRequest> {
    constructor() {
        super("forkserver.FundTokenRequest", [
            { no: 1, name: "token_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "account_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "slot", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<FundTokenRequest>): FundTokenRequest {
        const message = { tokenAddress: "", accountAddress: "", amount: "", slot: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FundTokenRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FundTokenRequest): FundTokenRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token_address */ 1:
                    message.tokenAddress = reader.string();
                    break;
                case /* string account_address */ 2:
                    message.accountAddress = reader.string();
                    break;
                case /* string amount */ 3:
                    message.amount = reader.string();
                    break;
                case /* int32 slot */ 4:
                    message.slot = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FundTokenRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token_address = 1; */
        if (message.tokenAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tokenAddress);
        /* string account_address = 2; */
        if (message.accountAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.accountAddress);
        /* string amount = 3; */
        if (message.amount !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.amount);
        /* int32 slot = 4; */
        if (message.slot !== 0)
            writer.tag(4, WireType.Varint).int32(message.slot);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message forkserver.FundTokenRequest
 */
export const FundTokenRequest = new FundTokenRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResetRequest$Type extends MessageType<ResetRequest> {
    constructor() {
        super("forkserver.ResetRequest", []);
    }
    create(value?: PartialMessage<ResetRequest>): ResetRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ResetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResetRequest): ResetRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ResetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message forkserver.ResetRequest
 */
export const ResetRequest = new ResetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockNumberRequest$Type extends MessageType<BlockNumberRequest> {
    constructor() {
        super("forkserver.BlockNumberRequest", []);
    }
    create(value?: PartialMessage<BlockNumberRequest>): BlockNumberRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlockNumberRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlockNumberRequest): BlockNumberRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: BlockNumberRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message forkserver.BlockNumberRequest
 */
export const BlockNumberRequest = new BlockNumberRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SaveStateRequest$Type extends MessageType<SaveStateRequest> {
    constructor() {
        super("forkserver.SaveStateRequest", []);
    }
    create(value?: PartialMessage<SaveStateRequest>): SaveStateRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SaveStateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SaveStateRequest): SaveStateRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SaveStateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message forkserver.SaveStateRequest
 */
export const SaveStateRequest = new SaveStateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadStateRequest$Type extends MessageType<LoadStateRequest> {
    constructor() {
        super("forkserver.LoadStateRequest", [
            { no: 1, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadStateRequest>): LoadStateRequest {
        const message = { state: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LoadStateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadStateRequest): LoadStateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string state */ 1:
                    message.state = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadStateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string state = 1; */
        if (message.state !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message forkserver.LoadStateRequest
 */
export const LoadStateRequest = new LoadStateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MineRequest$Type extends MessageType<MineRequest> {
    constructor() {
        super("forkserver.MineRequest", [
            { no: 1, name: "blocks", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MineRequest>): MineRequest {
        const message = { blocks: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MineRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MineRequest): MineRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 blocks */ 1:
                    message.blocks = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MineRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 blocks = 1; */
        if (message.blocks !== 0)
            writer.tag(1, WireType.Varint).int32(message.blocks);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message forkserver.MineRequest
 */
export const MineRequest = new MineRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetBalanceRequest$Type extends MessageType<SetBalanceRequest> {
    constructor() {
        super("forkserver.SetBalanceRequest", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetBalanceRequest>): SetBalanceRequest {
        const message = { address: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetBalanceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetBalanceRequest): SetBalanceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetBalanceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message forkserver.SetBalanceRequest
 */
export const SetBalanceRequest = new SetBalanceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StandardResponse$Type extends MessageType<StandardResponse> {
    constructor() {
        super("forkserver.StandardResponse", [
            { no: 1, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StandardResponse>): StandardResponse {
        const message = { status: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StandardResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StandardResponse): StandardResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string status */ 1:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StandardResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string status = 1; */
        if (message.status !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message forkserver.StandardResponse
 */
export const StandardResponse = new StandardResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DevRequest$Type extends MessageType<DevRequest> {
    constructor() {
        super("forkserver.DevRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DevRequest>): DevRequest {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DevRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DevRequest): DevRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DevRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message forkserver.DevRequest
 */
export const DevRequest = new DevRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockNumberResponse$Type extends MessageType<BlockNumberResponse> {
    constructor() {
        super("forkserver.BlockNumberResponse", [
            { no: 1, name: "block_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BlockNumberResponse>): BlockNumberResponse {
        const message = { blockNumber: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlockNumberResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlockNumberResponse): BlockNumberResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string block_number */ 1:
                    message.blockNumber = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlockNumberResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string block_number = 1; */
        if (message.blockNumber !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.blockNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message forkserver.BlockNumberResponse
 */
export const BlockNumberResponse = new BlockNumberResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SaveStateResponse$Type extends MessageType<SaveStateResponse> {
    constructor() {
        super("forkserver.SaveStateResponse", [
            { no: 1, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SaveStateResponse>): SaveStateResponse {
        const message = { state: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SaveStateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SaveStateResponse): SaveStateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string state */ 1:
                    message.state = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SaveStateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string state = 1; */
        if (message.state !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message forkserver.SaveStateResponse
 */
export const SaveStateResponse = new SaveStateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IncreaseTimeRequest$Type extends MessageType<IncreaseTimeRequest> {
    constructor() {
        super("forkserver.IncreaseTimeRequest", [
            { no: 1, name: "seconds", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<IncreaseTimeRequest>): IncreaseTimeRequest {
        const message = { seconds: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IncreaseTimeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IncreaseTimeRequest): IncreaseTimeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 seconds */ 1:
                    message.seconds = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IncreaseTimeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 seconds = 1; */
        if (message.seconds !== 0)
            writer.tag(1, WireType.Varint).int32(message.seconds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message forkserver.IncreaseTimeRequest
 */
export const IncreaseTimeRequest = new IncreaseTimeRequest$Type();
/**
 * @generated ServiceType for protobuf service forkserver.Fork
 */
export const Fork = new ServiceType("forkserver.Fork", [
    { name: "BlockNumber", options: {}, I: BlockNumberRequest, O: BlockNumberResponse },
    { name: "SetBalance", options: {}, I: SetBalanceRequest, O: StandardResponse },
    { name: "Mine", options: {}, I: MineRequest, O: StandardResponse },
    { name: "Reset", options: {}, I: ResetRequest, O: StandardResponse },
    { name: "SaveState", options: {}, I: SaveStateRequest, O: SaveStateResponse },
    { name: "LoadState", options: {}, I: LoadStateRequest, O: StandardResponse },
    { name: "FundToken", options: {}, I: FundTokenRequest, O: StandardResponse },
    { name: "IncreaseTime", options: {}, I: IncreaseTimeRequest, O: StandardResponse }
]);
